{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import necessary libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Assign data into variables as DataFrames using Pandas\n",
    "ratings = pd.read_csv('zippedData/imdb.title.ratings.csv.gz')\n",
    "people = pd.read_csv('zippedData/imdb.title.principals.csv.gz')\n",
    "title = pd.read_csv('zippedData/imdb.name.basics.csv.gz', index_col='nconst')\n",
    "money = pd.read_csv('zippedData/tn.movie_budgets.csv.gz')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Question 1: Does the gender of the main character affect movie rating?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "ratings.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Movies with more than 1000 ratings, sorted by highest rating.\n",
    "ratings = ratings.sort_values(by=['averagerating'], ascending=False).loc[df6['numvotes'] > 1000].set_index('tconst')\n",
    "print(rating)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Contains information about the main people involved with the movie in the order of importance.\n",
    "people.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Indexed the main person in each movie and dropped unnecessary columns.\n",
    "main_person = people.loc[people['ordering'] == 1].set_index('nconst').drop(columns=['job', 'ordering']) \\\n",
    ".dropna(subset=['category'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Now we can attempt to answer the first question - does the gender of the main character affect movie rating?\n",
    "\n",
    "# Join relevant dataframes by the identifier codes and dropped unnecessary columns.\n",
    "first_q = actors.join(title, how='left').set_index('tconst').join(rating, how='right') \\\n",
    ".drop(columns=['primary_profession', 'known_for_titles', 'death_year', 'birth_year'])\n",
    "\n",
    "# On a few occations, the main person (with order number 1) is neither an actor or an actress.\n",
    "# Use indexing to avoid those few datasets.\n",
    "first_q = j1.loc[(j1['category'] == 'actor') | (j1['category'] == 'actress')]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Graph a boxplot to visualize this data\n",
    "sns.boxplot(x=first_q.category, y=first_q.averagerating)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Boxblot doesn't show much difference - how about their distributions?\n",
    "first_q_actor = j1.loc[j1['category'] == 'actor']\n",
    "first_q_actress = j1.loc[j1['category'] == 'actress']\n",
    "sns.distplot(first_q_actor.averagerating)\n",
    "sns.distplot(first_q_actress.averagerating)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Another look at their distributions:\n",
    "plt.hist([j3.averagerating, j4.averagerating], bins=20, density=True, label=['actor', 'actress'])\n",
    "plt.legend()\n",
    "plt.xlabel('Movie Rating')\n",
    "plt.ylabel('Frequency')\n",
    "plt.title('Rating Distribution by Gender of Main Character')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# How about the number of actors and actresses?\n",
    "first_q.category.value_counts(normalize=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Question 1 - Findings:\n",
    "# The gender of the main character does not affect movie rating.\n",
    "# However, male were more than twice as likely to be the main actor than female actresses."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Question 2: How have the movie industry's production costs and revenue changed over the years?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Change the data type of the monetary values from string to integers.\n",
    "# Divide by a million so that numbers are easier to read.\n",
    "money.production_budget = money.production_budget.map(lambda x: int(x[1:].replace(',', '')) / 1000000)\n",
    "money.domestic_gross = money.domestic_gross.map(lambda x: int(x[1:].replace(',', ''))/ 1000000)\n",
    "money.worldwide_gross = money.worldwide_gross.map(lambda x: int(x[1:].replace(',', ''))/ 1000000)\n",
    "\n",
    "# Keep track of data by the release year.\n",
    "money.release_date = money.release_date.map(lambda x: int(x[-4:]))\n",
    "\n",
    "# Index data from the year 1998 or earlier.\n",
    "money = money.loc[money['release_date'] >= 1998]\n",
    "\n",
    "# Index data that is in the 75th quartile in terms of production budget.\n",
    "money = money.loc[money['production_budget'] > money.production_budget.quantile(.75)]\n",
    "\n",
    "# Drop data from the year 2019 and 2020, due to incomplete data.\n",
    "money = money.groupby(['release_date']).mean().drop([2020, 2019]).drop(['id'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Visualize the data as a line plot:\n",
    "g = sns.lineplot(data=df14)\n",
    "g.set_title('Costs and Returns from 1998 to 2018')\n",
    "sns.set\n",
    "xlabels = ['{0:.0f}'.format(x) for x in g.get_xticks()]\n",
    "g.set_ylabel('Millions of Dollars')\n",
    "g.set_xlabel('Release Years')\n",
    "g.set_xticklabels(xlabels)\n",
    ";"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Question 2 - Findings:\n",
    "# The production costs, domestic revenue, and international revenue have been growing steadily.\n",
    "# International revenue has shown impressive growth, almost tripling from the year 1998 to 2018.\n",
    "# Therefore, movies that are produced should aim not only for domestic audiences, but for international audiences.\n",
    "# This would affect many aspects of the movie such as genre choice, production language, and many more.\n",
    "# Further investigation on how to thrive in the internation market would be necessary.\n",
    "# Moreover, further data gathering and analysis should be done to investigate how COVID-19 disrupted this trend."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
